name: "Nix Configuration Validation"
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - ".github/**"
      - "README.md"
  pull_request:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-check:
    name: GitGuardian Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@537dbb82c54b792a2149e6b50a86de3025e10268 # v1.33.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  lint:
    name: Statix Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Run statix linter
        run: |
          echo "Linting Flake..."
          if make lint; then
            echo "success=true" >> $GITHUB_ENV
          else
            echo "Lint failed, listing flake.lock for debugging:"
            cat flake.lock
            echo "success=false" >> $GITHUB_ENV
            exit 1
          fi

  test-configurations:
    name: Test Nix Configurations
    needs: [security-check, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest]
        os: [macos-latest]
        include:
          - os: macos-latest
            config: "darwinConfigurations.mac.system"
            # - os: ubuntu-latest
            #   config: "nixosConfigurations.nixos.config.system.build.toplevel"
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@e50d5f73bfe71c2dd0aa4218de8f4afa59f8f81d # v16

      - name: Enable Nix Flakes
        run: |
          mkdir -p ~/.config/nix
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

      - name: Check Flake Inputs
        run: nix flake check

      - name: Build Configuration
        run: |
          nix build .#${{ matrix.config }} --dry-run
